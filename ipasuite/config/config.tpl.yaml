# This file should contain everything to configure the workflow on a global scale.

###
# path to the samples.tsv file that contains
# one row per sample. It can be parsed easily via pandas and opened by
# libreoffice and excel
#Typically:
#```yaml
# samples: "config/samples.tsv"
#```
samples: "samples.tsv"

results_dir: results
resource_dir: resources

## General Workflow configuration ##

###
# List of studied RNA, with an identifier, and the corresponding fasta file
# The fasta file should contain a description line containing the origin of the sequence (sequence database) with its unique identifier
# all "rna_id" column value in samples.tsv must have a corresponding line in this section.
#
# *Example:*
# ```yaml
# sequences:
#   sequence_id_1: "resources/sequence1.fa"
#   sequence_id_2: "resources/sequence2.fa"
#   sequence_id_3: "resources/sequence3.fa"
#```
sequences:
  RNA_id: "resources/RNAsequence.fa"

###
# List each condition here, each item in this line must correspond to a column of the samples.tsv file, and be also put into format -> condition
#
# *Example:*
#
# ```yaml
# conditions:
#   - probe
#   - temperature
#   - magnesium
#   - ...
#```
conditions:
  probe:
    - 1M7
    - NMIA
    - NIA
    - BzCN
    - DMS
    - CMCT
  temperature:
    - "37"
    - "50"
  magnesium:
    - Mg
    - noMg

###
# Allow snakemake to import automatically external files
# Not fully tested yet
allow_auto_import: True

###
# Section to define filename and titles formatting
format:
  ###
  # The condition format  is used to construct filenames that are unique
  # for any combination of conditions.
  # It must reference all variable condition, the condition names must correspond to column headers in the samples.tsv file
  #
  # *Example:*
  # ```yaml
  # format:
  #   ...
  #   condition: "{probe}_{temperature}_{magnesium}"
  #   ...
  # ```
  condition: "{probe}_T{temperature}C_{magnesium}"
  ###
  # Same as condition but for control data. {control} will be replaced by the rawdata->control variable content
  #
  # *Example:*
  # ```yaml
  # format:
  #   ...
  #   control_condition: "{control}_of_{probe}_{temperature}C_{magnesium}"
  #   ...
  # ```
  control_condition: "{control}_of_{probe}_T{temperature}C_{magnesium}"
  ###
  # Format use to create comprehensible Snakemake message when running workflow. conditions must be prefixed with "wildcards."
  #
  # *Example:*
  # ```yaml
  # format:
  #   ...
  #   message: "{wildcards.rna_id} with {wildcards.probe} with {wildcards.temperature}°C {wildcards.magnesium}"
  #   ...
  # ```
  message: "{wildcards.rna_id} with {wildcards.probe} with {wildcards.temperature} {wildcards.magnesium}"

  previous:
    condition: "{probe}_{interaction}_{magnesium}"
    control_condition: "{control}_of_{probe}_{interaction}_{magnesium}"



###
# Information concerning raw datas
rawdata:
  ###
  # Path to the folder containing Raw experimental data, it will be prefixed to "control_file" and "probe_file" to auto import data from this folder. Absolute path, and relative path from project root are accepted.
  #
  # *Example:
  # ```yaml
  # rawdata:
  #   ...
  #   path_prefix: "path/to/my/raw/data/folder
  #   ...
  # ```
  path_prefix: "resources/raw_data"
  ###
  # Type of the raw data. It will establish the starting point of the pipeline. Either from file directly from the sequencer or already converted to csv.
  # Accepted values : "fluo-ceq8000" or "fluo-ce"
  #
  # *Example:*
  # ```yaml
  # rawdata:
  #   ...
  #   type: "fluo-ceq8000"
  #   ...
  # ```
  type: "fluo-ceq8000" # ["fluo-ceq8000", "fluo-ce", "fluo-fsa"]
  ###
  # Name of the control
  #
  # *Example:*
  # ```yaml
  # rawdata:
  #   ...
  #   control: "DMSO"
  #   ...
  # ```
  control: "DMSO"


probe:
  1M7:
    reactive_nucleotides: ["A", "C", "G", "U"]
  BzCN:
    reactive_nucleotides: ["A", "C", "G", "U"]
  NMIA:
    reactive_nucleotides: ["A", "C", "G", "U"]
  NIA:
    reactive_nucleotides: ["A", "C", "G", "U"]
  DMS:
    reactive_nucleotides: ["A", "C"]
  CMCT:
    reactive_nucleotides: ["G", "U"]

## Steps configurations ##

###
# QuShape project generator & extractor
# This section allow to configure the way snakemake will generate QuShape
# project. those informations must be identical to the configuration of your
# capillary sequencer
#
# `channel` section corresponds to the definition of sequencer channels
# used for this project, here, channel start at index 0: channel 1
# correspond to value 0
# `use_subsequence` boolean tells if want the pipeline to manage RNA longer that what
# your sequencer can manage, in which case, you use multiple reverse transcription
# primer, in order to have several starting point for your sequencing. And you want the
# workflow to assemble those subsequence into a full RNA.
# `run_qushape` you can ask the workflow to launch qushape while running. you
# must also fill in `run_qushape_conda_env` with the conda env containing
# qushape
# `check_integrity` true by default, and highly recommanded to stay true. With true, the workflow will check if the sequence inside the
# QuShape File is the same as the sequence declared in sample.tsv and config.yaml. If
# you use QuShape file not generated by the workflow, you might have QuShape File with a
# another sequence (Longer for example). In which case the test will fail. Only if you
# know what your are doing you might want to disable this test. Warning: wrong sequences can
# lead to incoherent data, duplicated entry in output file and other inconsistancy.
# *Example:*
#
# ```yaml
# qushape:
#  check_integrity: true
#  use_subsequence: false
#  run_qushape: false
#  run_qushape_conda_env: qushape
#  channels:
#    RX: 0 # Channel 1
#    RXS1: 2 # Channel 3
#    BG: 0 # Channel 1
#    BGS1: 2 # Channel 3
# ```
qushape:
  check_integrity: true
  use_subsequence: false
  run_qushape: false
  run_qushape_conda_env: qushape
  channels:
    RX: 0 # Channel 1
    RXS1: 2 # Channel 3
    BG: 0 # Channel 1
    BGS1: 2 # Channel 3

###
# Reactivity Normalization configuration
#
# items in this sections are equivalent of the flags available when running
# ```bash
# python workflow/scripts/tools/normalize_reactivity.py --help
# ```
# you can refer to this for more accurate information
#
#
# ```yaml
# normalization:
#   # Which nucleotide are reactive to the shape probe
#   reactive_nucleotides: ["A", "C", "G", "U"]
#   # All value above this percentile are considered as outliers, preliminarly to all other treatments.
#   stop_percentile: 90.
#   # Value below this threshold are considered non-reactive (0.0)
#   low_norm_reactivity_threshold: -0.3
#   # Which normalizations methods will be used, several are accepted. Autorized values are : simple, interquartile
#   norm_methods:
#     - simple
#     - interquartile
#   # oulier threshold for simple normalization method
#   simple_outlier_percentile: 98.
#   # percentile of values averaged to create the normalization term
#   simple_norm_term_avg_percentile: 90.
# ```
#
#
normalization:
  # Default value of Which nucleotide are reactive to the shape probe - this value is only used if the «probe» section is
  # not defined for the current probe.
  reactive_nucleotides: ["A", "C", "G", "U"]
  # All value above this percentile are considered as outliers, preliminarly to all other treatments.
  stop_percentile: 90.
  # Value below this threshold are considered non-reactive (0.0)
  low_norm_reactivity_threshold: -0.3
  # Which normalizations methods will be used, several are accepted. Autorized values are : simple, interquartile
  norm_methods:
    - simple
    - interquartile
  # oulier threshold for simple normalization method
  simple_outlier_percentile: 98.
  # percentile of values averaged to create the normalization term
  simple_norm_term_avg_percentile: 90.

###
# Replicate Aggregation configuration
#
# items in this sections are equivalent of the flags available when running
# ```bash
# python workflow/scripts/tools/aggregate_reactivity.py --help
# ```
# you can refer to this for more accurate information
#
#
# ```yaml
# aggregate:
#   norm_method: simple # or interquartile
#
#   # You can specify the name of the column used for normalization instead of the normalization method
#   #norm_column: "simple_norm_reactivity" #
#   min_ndata_perc: 0.5
#   min_nsubdata_perc: 0.66
#   max_mean_perc: 0.682
#   min_dispersion: 0.05
# ```
aggregate:
  plot: True
  norm_method: simple # or interquartile
  min_std: 0.15
  reactivity_medium: 0.4
  reactivity_high: 0.7

  # You can specify the name of the column used for normalization instead of the normalization method
  #norm_column: "simple_norm_reactivity" #
  #  min_ndata_perc: 0.5
  #  min_nsubdata_perc: 0.66
  #  max_mean_perc: 0.682
  #  min_dispersion: 0.05

###
# IPANEMAP configuration
#
# in order to calculate structures, you can define in which way you want to
# combine conditions as input for ipanemap. the `pool section` enable you to do
# so.
#
# *Example:*
#
# ```yaml
# ipanemap:
#   ...
#   pools:
#     - id: 1M7_noMg_37C
#       rna_id: sequence1
#       conditions:
#         - temperature: 37
#           magnesium: noMg
#           probe: 1M7
#     - id: allProbe_noMg_37C
#       rna_id: sequence1
#       conditions:
#         - temperature: 37
#           magnesium: noMg
#           probe: 1M7
#         - temperature: 37
#           magnesium: noMg
#           probe: NMIA
#         - temperature: 37
#           magnesium: noMg
#           probe: BzCN
#   ...
# ```
#
# each run of IPANEMAP can be entirerly configure.
# to create un new run (or `pool`) add a dash in the `pools` sections
# each pool should have an unique `id` of your choice.
#
# `rna_id` correspond to the sequence to input to IPANEMAP this id must
# correspond to and id of the `sequences` section of this configuration file.
#
# `conditions` correspond of the sets of conditions you want to be added to
# IPANEMAP run. each set of condition start with a dash and must contains all
# conditions references in the `conditions` section of this configuration file.
#
# *In the Example:*
#
# - first pool (1M7_noMg_37C) will be executed with "sequence1"
# and with one condition:
#   - all sample aggregated which have no magnesium, a temperature of 37C,
# and 1M7 probing
#
# - second pool (allProbe_noMg_37C) will be executed with "sequence1"
# and with 3 conditions :
#   - all sample aggregated which have no magnesium, a temperature of 37C, and
#  1M7 probing
#   - all sample aggregated which have no magnesium, a temperature of 37C, and
#  NMIA probing
#   - all sample aggregated which have no magnesium, a temperature of 37C, and
#  BzCN probing
#
# Parameters in sampling, clustering, pareto, visualization are equivalent to
# the content of ipanemap config file. Please refer to IPANEMAP documentation
#
# [https://github.com/afafbioinfo/IPANEMAP](https://github.com/afafbioinfo/IPANEMAP)
#
ipanemap:
  pools:
    - id: Pool_id
      rna_id: RNA_id
      external_conditions:
        - name: 1M7_noMg_T37C_map
          path: path/to/shape
      conditions:
        - temperature: 37
          magnesium: noMg
          probe: 1M7
      alignements:
        #alignment_name: .aln
        #alignement_name2: file2.aln

  config:
    sampling:
      enable: true
      nstructures: 1000
      temperature: 37
      slope: 1.3
      intercept: -0.4
    clustering:
      max_diam: 7
      max_avg_diam: 7
    pareto:
      percent: 20
      zcutoff: 0.05
    visual:
      models: true
      centroids: true
      probing: true


varna:
  colormapstyle:
     $-0.5:#999999,$-0.49999:#FFFFFF,$0.4:#FFFFFF,$0.40001:#FAE902,$0.7:#FAE902,$0.70001:#E80C0C,$5.00:#E80C0C
#"$-10.00:#CCCCCC,$-0.31:#999999,$-0.3:#FFFFFF,$0.2:#FFFFFF,$0.4:#FFFF00,$0.69:#FFFF47,$0.7:#FF0000,$5.00:#FF0033"


footprint:
  compares:
    - id: Output_file_name
      rna_id: RNA_id
      pool_id: Pool_id
      condition1:
        temperature: 37
        magnesium: Mg
        probe: 1M7
      condition2:
        temperature: 37
        magnesium: noMg
        probe: 1M7
  config:
#    deviation_type: stdev
    ttest_pvalue_thres: 0.05
    diff_thres: 0.2
    ratio_thres: 0.2
    plot_format: svg


###
# Folder names
#
# Intermediary folder naming is fully customable,
#
# *Default values:*
#
# ```yaml
# folders:
#   fluo-ceq8000: 1.1-fluo-ceq8000
#   fluo-ce: 1.2-fluo-ce
#   qushape: 2-qushape
#   reactivity: 3.1-reactivity
#   normreact: 3.2-normreact
#   aggreact: 4.1-aggreact
#   aggreact-ipanemap: 4.2-aggreact-ipanemap
#   ipanemap-config: 5.1-ipanemap-config
#   ipanemap-out: 5.2-ipanemap-out
#   structure: 5.3-structure
#   varna: 5.4-varna
# ```
folders:
  fluo-fsa: 1.1-fluo-raw
  fluo-ceq8000: 1.1-fluo-raw
  fluo-ce: 1.2-fluo-ceq8000-trim
  subseq: 1.3-sub-sequences
  qushape: 2-qushape
  reactivity: 3.1-reactivity
  normreact: 3.2-normalized-reactivity
  alignnormreact: 3.3-align-normalized-reactivity
  aggreact: 4.aggregated-reactivity
  aggreact-ipanemap: 4.aggregated-reactivity
  ipanemap-config: 5.1-ipanemap-config
  ipanemap-out: 5.2-ipanemap-temp
  structure: 5.3-structure
  varna: 5.4-varna
  footprint: 5.5-footprint
